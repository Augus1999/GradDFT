from flax.core import freeze
from jax import numpy as jnp
from popular_functionals import B3LYP, B88, b3lyp_combine, b3lyp_exhf_features, b88_features, b88_combine

from interface.pyscf import molecule_from_pyscf

# again, this only works on startup!
from jax import config

from utils.types import Hartree2kcalmol
config.update("jax_enable_x64", True)

# First we define a molecule:
from pyscf import gto, dft
from train import molecule_predictor
mol = gto.M(atom = 'H 0 0 0; F 0 0 1.1')

grids = dft.gen_grid.Grids(mol)
grids.level = 2
grids.build()

params = freeze({'params': {}})

mf = dft.UKS(mol)
mf.grids = grids
mf.xc = 'B88,VWN*.0'
ground_truth_energy = mf.kernel()

molecule = molecule_from_pyscf(mf, omegas = [])
predict_molecule = molecule_predictor(B88, b88_features, b88_combine, omegas = [], functional_type = 'GGA')
predicted_e, fock = predict_molecule(params, molecule)


mf = dft.UKS(mol)
mf.grids = grids
mf.xc = 'b3lyp'
ground_truth_energy = mf.kernel()
molecule = molecule_from_pyscf(mf, omegas = [0])
predict_molecule = molecule_predictor(B3LYP, b3lyp_exhf_features, b3lyp_combine, omegas = [0], functional_type = 'GGA')


predicted_e, fock = predict_molecule(params, molecule)

diff = (predicted_e-ground_truth_energy)*Hartree2kcalmol

assert diff < 1e1


### An alternative way of generating the params (which is an empty dict)
'''# We generate the features from the molecule we created before
features = b3lyp_exhf_features(molecule = molecule, functional_type='MGGA')
ehf = molecule.HF_energy_density([0])
ehf = jnp.sum(ehf, axis = (0,1)).T
inputs = jnp.concatenate([features, ehf], axis=1)

# We initialize the Functional parameters
key = PRNGKey(42)
key, = split(key, 1)
params = B3LYP.init(key, inputs)'''


